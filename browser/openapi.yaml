openapi: 3.0.3
info:
  title: O'Reilly Learning Platform API
  description: Internal API for O'Reilly Learning Platform search functionality
  version: 1.0.0
  contact:
    name: Generated from browser package
    
servers:
  - url: https://learning.oreilly.com
    description: O'Reilly Learning Platform

paths:
  /api/v2/search/:
    get:
      operationId: searchContentV2
      summary: Search O'Reilly content using V2 API
      description: Search for books, videos, and other content on O'Reilly Learning Platform
      tags:
        - search
      parameters:
        - name: query
          in: query
          required: true
          description: Search query string
          schema:
            type: string
            example: "Docker"
        - name: rows
          in: query
          required: false
          description: Number of results to return
          schema:
            type: integer
            default: 100
            minimum: 1
            maximum: 1000
        - name: tzOffset
          in: query
          required: false
          description: Timezone offset in hours
          schema:
            type: integer
            default: -9
        - name: aia_only
          in: query
          required: false
          description: Return only AI-assisted content
          schema:
            type: boolean
            default: false
        - name: feature_flags
          in: query
          required: false
          description: Feature flags for search
          schema:
            type: string
            default: "improveSearchFilters"
        - name: report
          in: query
          required: false
          description: Include report data in response
          schema:
            type: boolean
            default: true
        - name: isTopics
          in: query
          required: false
          description: Search only in topics
          schema:
            type: boolean
            default: false
      responses:
        '200':
          description: Successful search response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchAPIResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/book/{bookId}/:
    get:
      operationId: getBookDetails
      summary: Get detailed book information
      description: Retrieve comprehensive metadata for a specific book
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: Book ID or product ID
          schema:
            type: string
            example: "9781098131814"
      responses:
        '200':
          description: Book details retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookDetailResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/book/{bookId}/flat-toc/:
    get:
      operationId: getBookFlatTOC
      summary: Get flat table of contents for a book
      description: Retrieve a flattened table of contents structure for a specific book
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: Book ID or product ID
          schema:
            type: string
            example: "9781098131814"
      responses:
        '200':
          description: Flat table of contents retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FlatTOCResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/book/{bookId}/chapter/{chapterName}.html:
    get:
      operationId: getBookChapterInfo
      summary: Get chapter information for a specific book chapter
      description: Retrieve metadata for a specific chapter in a book
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: Book ID or product ID
          schema:
            type: string
            example: "9781098131814"
        - name: chapterName
          in: path
          required: true
          description: Chapter name from flat-toc
          schema:
            type: string
            example: "preface01"
      responses:
        '200':
          description: Chapter information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterInfoResponse'
        '404':
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v2/epubs/urn:orm:book:{bookId}/files/{chapterName}.html:
    get:
      operationId: getBookChapterContent
      summary: Get chapter HTML content for a specific book chapter
      description: Retrieve the raw HTML content for a specific chapter in a book
      tags:
        - books
      parameters:
        - name: bookId
          in: path
          required: true
          description: Book ID or product ID
          schema:
            type: string
            example: "9781098131814"
        - name: chapterName
          in: path
          required: true
          description: Chapter name from flat-toc
          schema:
            type: string
            example: "preface01"
      responses:
        '200':
          description: Chapter content retrieved successfully
          content:
            text/html:
              schema:
                type: string
                description: Raw HTML content of the chapter
        '404':
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/miso-answers-relay-service/questions/:
    post:
      operationId: submitQuestion
      summary: Submit a question to O'Reilly Answers
      description: Submit a natural language question to receive AI-generated answers with references
      tags:
        - answers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionRequest'
      responses:
        '201':
          description: Question submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /api/v1/miso-answers-relay-service/user-question-history/{questionId}/:
    get:
      operationId: getAnswer
      summary: Get answer for a submitted question
      description: Retrieve the answer for a previously submitted question, including completion status
      tags:
        - answers
      parameters:
        - name: questionId
          in: path
          required: true
          description: Question ID returned from question submission
          schema:
            type: string
            example: "550e8400-e29b-41d4-a716-446655440000"
        - name: include_unfinished
          in: query
          required: false
          description: Include unfinished answers in response
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: Answer retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnswerResponse'
        '404':
          description: Question not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    SearchAPIResponse:
      type: object
      description: Response from O'Reilly search API
      properties:
        data:
          $ref: '#/components/schemas/SearchDataContainer'
        results:
          type: array
          items:
            $ref: '#/components/schemas/RawSearchResult'
        items:
          type: array
          items:
            $ref: '#/components/schemas/RawSearchResult'
        hits:
          type: array
          items:
            $ref: '#/components/schemas/RawSearchResult'
    
    SearchDataContainer:
      type: object
      description: Container for search data
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/RawSearchResult'
    
    RawSearchResult:
      type: object
      description: Raw search result from O'Reilly API
      properties:
        id:
          type: string
          description: Item ID
        product_id:
          type: string
          description: Product ID
        title:
          type: string
          description: Item title
        name:
          type: string
          description: Item name
        display_title:
          type: string
          description: Display title
        product_name:
          type: string
          description: Product name
        authors:
          type: array
          items:
            type: string
          description: List of author names
        author:
          $ref: '#/components/schemas/Author'
        creators:
          type: array
          items:
            $ref: '#/components/schemas/Creator'
        author_names:
          type: array
          items:
            type: string
          description: Alternative author names field
        content_type:
          type: string
          description: Type of content
        type:
          type: string
          description: Alternative type field
        format:
          type: string
          description: Content format
        product_type:
          type: string
          description: Product type
        description:
          type: string
          description: Item description
        summary:
          type: string
          description: Item summary
        excerpt:
          type: string
          description: Item excerpt
        description_with_markups:
          type: string
          description: Description with markup
        short_description:
          type: string
          description: Short description
        web_url:
          type: string
          description: Web URL
        url:
          type: string
          description: URL
        learning_url:
          type: string
          description: Learning platform URL
        link:
          type: string
          description: Link
        ourn:
          type: string
          description: O'Reilly URN
        isbn:
          type: string
          description: ISBN
        publisher:
          type: string
          description: Publisher name
        publishers:
          type: array
          items:
            type: string
          description: List of publishers
        imprint:
          type: string
          description: Imprint
        publisher_name:
          type: string
          description: Publisher name alternative
        published_date:
          type: string
          description: Published date
        publication_date:
          type: string
          description: Publication date alternative
        date_published:
          type: string
          description: Date published alternative
        pub_date:
          type: string
          description: Publication date alternative
    
    Author:
      type: object
      description: Author information
      properties:
        name:
          type: string
          description: Author name
    
    Creator:
      type: object
      description: Creator information
      properties:
        name:
          type: string
          description: Creator name
    
    Publisher:
      type: object
      description: Publisher information
      properties:
        id:
          type: integer
          description: Publisher ID
        name:
          type: string
          description: Publisher name
        slug:
          type: string
          description: Publisher slug
    
    Topics:
      type: object
      description: Topic information
      properties:
        name:
          type: string
          description: Topic name
        slug:
          type: string
          description: Topic slug
        score:
          type: number
          format: float
          description: Topic relevance score
        uuid:
          type: string
          description: Topic UUID
        epub_identifier:
          type: string
          description: EPUB identifier
    
    BookDetailResponse:
      type: object
      description: Comprehensive book metadata
      properties:
        id:
          type: string
          description: Book ID
        url:
          type: string
          description: Book URL
        web_url:
          type: string
          description: Web URL
        title:
          type: string
          description: Book title
        description:
          type: string
          description: Book description
        authors:
          type: array
          items:
            $ref: '#/components/schemas/Author'
        publishers:
          type: array
          items:
            $ref: '#/components/schemas/Publisher'
        isbn:
          type: string
          description: ISBN
        virtual_pages:
          type: integer
          description: Number of virtual pages
        average_rating:
          type: number
          format: float
          description: Average rating
        cover:
          type: string
          description: Cover image URL
        issued:
          type: string
          description: Issue date
        topics:
          type: array
          items:
            $ref: '#/components/schemas/Topics'
        language:
          type: string
          description: Language code
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
    
    
    TableOfContentsItem:
      type: object
      description: Table of contents item
      properties:
        id:
          type: string
          description: Item ID
        title:
          type: string
          description: Item title
        href:
          type: string
          description: Item link
        level:
          type: integer
          description: Nesting level
        parent:
          type: string
          description: Parent item ID
        children:
          type: array
          items:
            $ref: '#/components/schemas/TableOfContentsItem'
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata
    
    TableOfContentsResponse:
      type: object
      description: Table of contents response
      properties:
        book_id:
          type: string
          description: Book ID
        book_title:
          type: string
          description: Book title
        table_of_contents:
          type: array
          items:
            $ref: '#/components/schemas/TableOfContentsItem'
        total_chapters:
          type: integer
          description: Total number of chapters
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata

    FlatTOCResponse:
      type: object
      description: Flat table of contents response with all items in a single array
      properties:
        book_id:
          type: string
          description: Book ID
          example: "9781098131814"
        book_title:
          type: string
          description: Book title
          example: "Learning Go: An Idiomatic Approach to Real-World Go Programming"
        toc_items:
          type: array
          description: Flat list of all table of contents items
          items:
            $ref: '#/components/schemas/FlatTOCItem'
        total_items:
          type: integer
          description: Total number of TOC items
          example: 42
        metadata:
          type: object
          additionalProperties: true
          description: Additional metadata about the flat TOC structure
          example:
            format: "flat"
            api_version: "v1"
            generated_at: "2024-01-01T00:00:00Z"

    FlatTOCItem:
      type: object
      description: Individual item in flat table of contents
      properties:
        id:
          type: string
          description: Unique identifier for the TOC item
          example: "toc-item-1"
        title:
          type: string
          description: Display title of the section/chapter
          example: "Chapter 1: Setting Up Your Go Environment"
        href:
          type: string
          description: Link or reference to the content
          example: "/library/view/learning-go/9781098131814/ch01.html"
        level:
          type: integer
          description: Hierarchical level (0=root, 1=chapter, 2=section, etc.)
          example: 0
          minimum: 0
        parent:
          type: string
          description: Reference to parent item ID (if applicable)
          example: "toc-item-parent"
        metadata:
          type: object
          additionalProperties: true
          description: Additional information about the item

    ChapterInfoResponse:
      type: object
      description: Chapter metadata information
      properties:
        book_id:
          type: string
          description: Book ID
          example: "9781098131814"
        chapter_name:
          type: string
          description: Chapter name identifier
          example: "preface01"
        chapter_title:
          type: string
          description: Human-readable chapter title
          example: "Preface"
        chapter_url:
          type: string
          description: URL to the chapter content
          example: "/library/view/learning-go/9781098131814/preface01.html"
        content_url:
          type: string
          description: URL to the raw chapter content
          example: "/api/v2/epubs/urn:orm:book:9781098131814/files/preface01.html"
        metadata:
          type: object
          additionalProperties: true
          description: Additional chapter metadata

    ChapterContentResponse:
      type: object
      description: Structured chapter content with parsed HTML
      properties:
        book_id:
          type: string
          description: Book ID
          example: "9781098131814"
        chapter_name:
          type: string
          description: Chapter name identifier
          example: "preface01"
        chapter_title:
          type: string
          description: Human-readable chapter title
          example: "Preface"
        content:
          $ref: '#/components/schemas/ParsedChapterContent'
        source_url:
          type: string
          description: Source URL of the content
          example: "/api/v2/epubs/urn:orm:book:9781098131814/files/preface01.html"
        metadata:
          type: object
          additionalProperties: true
          description: Processing metadata
          example:
            extraction_method: "html_parsing"
            processed_at: "2024-01-01T00:00:00Z"
            word_count: 1250

    ParsedChapterContent:
      type: object
      description: Structured content parsed from HTML
      properties:
        title:
          type: string
          description: Chapter title extracted from HTML
          example: "Preface"
        sections:
          type: array
          description: List of content sections
          items:
            $ref: '#/components/schemas/ContentSection'
        paragraphs:
          type: array
          description: List of paragraphs in order
          items:
            type: string
          example: ["This is the first paragraph.", "This is the second paragraph."]
        headings:
          type: array
          description: List of headings with levels
          items:
            $ref: '#/components/schemas/ContentHeading'
        code_blocks:
          type: array
          description: Code blocks found in the chapter
          items:
            $ref: '#/components/schemas/CodeBlock'
        images:
          type: array
          description: Images found in the chapter
          items:
            $ref: '#/components/schemas/ImageReference'
        links:
          type: array
          description: Links found in the chapter
          items:
            $ref: '#/components/schemas/LinkReference'

    ContentSection:
      type: object
      description: A section of content with heading and content
      properties:
        heading:
          $ref: '#/components/schemas/ContentHeading'
        content:
          type: array
          description: Content items in this section
          items:
            oneOf:
              - type: string
                description: Text paragraph
              - $ref: '#/components/schemas/CodeBlock'
              - $ref: '#/components/schemas/ImageReference'
        
    ContentHeading:
      type: object
      description: A heading element
      properties:
        level:
          type: integer
          description: Heading level (1-6)
          example: 2
          minimum: 1
          maximum: 6
        text:
          type: string
          description: Heading text
          example: "Getting Started"
        id:
          type: string
          description: HTML id attribute if present
          example: "getting-started"

    CodeBlock:
      type: object
      description: A code block
      properties:
        language:
          type: string
          description: Programming language
          example: "go"
        code:
          type: string
          description: Code content
          example: "package main\n\nfunc main() {\n    fmt.Println(\"Hello, World!\")\n}"
        caption:
          type: string
          description: Code block caption if present
          example: "Example 1-1. Hello World program"

    ImageReference:
      type: object
      description: An image reference
      properties:
        src:
          type: string
          description: Image source URL
          example: "/library/view/learning-go/9781098131814/assets/image1.png"
        alt:
          type: string
          description: Alternative text
          example: "Go logo"
        caption:
          type: string
          description: Image caption if present
          example: "Figure 1-1. The Go programming language logo"

    LinkReference:
      type: object
      description: A link reference
      properties:
        href:
          type: string
          description: Link URL
          example: "https://golang.org"
        text:
          type: string
          description: Link text
          example: "Go programming language website"
        type:
          type: string
          description: Link type
          enum: ["external", "internal", "anchor"]
          example: "external"
    
    BookOverviewAndTOCResponse:
      type: object
      description: Combined book details and table of contents
      properties:
        book_detail:
          $ref: '#/components/schemas/BookDetailResponse'
        table_of_contents:
          $ref: '#/components/schemas/TableOfContentsResponse'
    
    QuestionRequest:
      type: object
      description: Request to submit a question to O'Reilly Answers
      required:
        - question
        - fq
        - source_fl
        - related_resource_fl
        - _pipeline_config
      properties:
        question:
          type: string
          description: The natural language question to ask
          example: "How do I build a data lake on S3?"
        fq:
          type: string
          description: Filter query for content types and permissions
          example: "(type:book OR type:video OR type:article) AND language:(\"en\" OR \"EN\" OR \"en-au\" OR \"en-gb\" OR \"en-GB\" OR \"en-us\" OR \"en-US\") AND ( NOT custom_attributes.required_p_permissions:aia ) AND ( NOT custom_attributes.required_p_permissions:cldsc ) AND ( NOT custom_attributes.required_p_permissions:cprex ) AND ( NOT custom_attributes.required_p_permissions:lvtrg ) AND ( NOT custom_attributes.required_p_permissions:ntbks ) AND ( NOT custom_attributes.required_p_permissions:scnrio )"
        source_fl:
          type: array
          description: Fields to include in source results
          items:
            type: string
          example: [
            "custom_attributes.ourn",
            "custom_attributes.publishers",
            "custom_attributes.marketing_type*",
            "custom_attributes.required_p_permissions",
            "url",
            "cover_image",
            "authors",
            "html"
          ]
        related_resource_fl:
          type: array
          description: Fields to include in related resource results
          items:
            type: string
          example: [
            "custom_attributes.ourn",
            "custom_attributes.publishers",
            "custom_attributes.marketing_type*",
            "custom_attributes.required_p_permissions",
            "url",
            "cover_image",
            "authors",
            "html"
          ]
        _pipeline_config:
          $ref: '#/components/schemas/PipelineConfig'

    PipelineConfig:
      type: object
      description: Configuration for the answer generation pipeline
      properties:
        snippet_length:
          type: integer
          description: Length of content snippets
          example: 500
        highlight_length:
          type: integer
          description: Length of highlighted content
          example: 200

    QuestionResponse:
      type: object
      description: Response from question submission
      properties:
        question_id:
          type: string
          description: Unique identifier for the submitted question
          example: "550e8400-e29b-41d4-a716-446655440000"
        status:
          type: string
          description: Status of the question submission
          example: "submitted"
        message:
          type: string
          description: Response message
          example: "Question submitted successfully"

    AnswerResponse:
      type: object
      description: Response containing the answer to a submitted question
      properties:
        question_id:
          type: string
          description: Question identifier
          example: "550e8400-e29b-41d4-a716-446655440000"
        is_finished:
          type: boolean
          description: Whether the answer generation is complete
          example: true
        miso_response:
          $ref: '#/components/schemas/MisoResponse'

    MisoResponse:
      type: object
      description: The AI-generated response data
      properties:
        data:
          $ref: '#/components/schemas/AnswerData'

    AnswerData:
      type: object
      description: The core answer data with content and references
      properties:
        answer:
          type: string
          description: The AI-generated answer in markdown format
          example: "To build a data lake on S3, you need to consider several key aspects..."
        sources:
          type: array
          description: Source materials used to generate the answer
          items:
            $ref: '#/components/schemas/AnswerSource'
        related_resources:
          type: array
          description: Additional related resources
          items:
            $ref: '#/components/schemas/RelatedResource'
        affiliation_products:
          type: array
          description: O'Reilly products related to the question
          items:
            $ref: '#/components/schemas/AffiliationProduct'
        followup_questions:
          type: array
          description: Suggested follow-up questions for deeper exploration
          items:
            type: string
          example: [
            "What are the best practices for data partitioning in S3?",
            "How do I optimize costs when storing data in S3?",
            "What security considerations should I keep in mind for S3 data lakes?"
          ]

    AnswerSource:
      type: object
      description: A source document used to generate the answer
      properties:
        title:
          type: string
          description: Title of the source
          example: "Building Data-Intensive Applications"
        url:
          type: string
          description: URL to the source
          example: "https://learning.oreilly.com/library/view/designing-data-intensive/9781491903063/"
        authors:
          type: array
          items:
            type: string
          description: Authors of the source
          example: ["Martin Kleppmann"]
        cover_image:
          type: string
          description: Cover image URL
          example: "https://learning.oreilly.com/covers/9781491903063/250w/"
        excerpt:
          type: string
          description: Relevant excerpt from the source
          example: "Data lakes are repositories for storing raw data in its native format..."

    RelatedResource:
      type: object
      description: A related resource for additional reading
      properties:
        title:
          type: string
          description: Title of the resource
          example: "AWS Data Lake Implementation Guide"
        url:
          type: string
          description: URL to the resource
        authors:
          type: array
          items:
            type: string
          description: Authors of the resource
        content_type:
          type: string
          description: Type of content (book, video, article)
          example: "book"

    AffiliationProduct:
      type: object
      description: An O'Reilly product related to the answer
      properties:
        product_id:
          type: string
          description: Product identifier
          example: "9781491903063"
        title:
          type: string
          description: Product title
          example: "Designing Data-Intensive Applications"
        url:
          type: string
          description: Product URL
        authors:
          type: array
          items:
            type: string
          description: Product authors
        content_type:
          type: string
          description: Product type
          example: "book"

    ErrorResponse:
      type: object
      description: Error response
      properties:
        error:
          type: string
          description: Error message
        code:
          type: integer
          description: Error code
        details:
          type: string
          description: Error details

  securitySchemes:
    CookieAuth:
      type: apiKey
      in: cookie
      name: orm-jwt
      description: O'Reilly session authentication via JWT cookie

security:
  - CookieAuth: []

tags:
  - name: search
    description: Search operations for O'Reilly content
  - name: books
    description: Book-related operations
  - name: answers
    description: AI-powered Q&A operations for O'Reilly content
