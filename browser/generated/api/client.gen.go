// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

const (
	CookieAuthScopes = "CookieAuth.Scopes"
)

// Author Author information
type Author struct {
	// Name Author name
	Name *string `json:"name,omitempty"`
}

// BookDetailResponse Comprehensive book metadata
type BookDetailResponse struct {
	Authors *[]Author `json:"authors,omitempty"`

	// AverageRating Average rating
	AverageRating *float32 `json:"average_rating,omitempty"`

	// Cover Cover image URL
	Cover *string `json:"cover,omitempty"`

	// Description Book description
	Description *string `json:"description,omitempty"`

	// Id Book ID
	Id *string `json:"id,omitempty"`

	// Isbn ISBN
	Isbn *string `json:"isbn,omitempty"`

	// Issued Issue date
	Issued *string `json:"issued,omitempty"`

	// Language Language code
	Language *string `json:"language,omitempty"`

	// Metadata Additional metadata
	Metadata   *map[string]interface{} `json:"metadata,omitempty"`
	Publishers *[]Publisher            `json:"publishers,omitempty"`

	// Title Book title
	Title  *string   `json:"title,omitempty"`
	Topics *[]Topics `json:"topics,omitempty"`

	// Url Book URL
	Url *string `json:"url,omitempty"`

	// VirtualPages Number of virtual pages
	VirtualPages *int `json:"virtual_pages,omitempty"`

	// WebUrl Web URL
	WebUrl *string `json:"web_url,omitempty"`
}

// ChapterInfoResponse Chapter metadata information
type ChapterInfoResponse struct {
	// BookId Book ID
	BookId *string `json:"book_id,omitempty"`

	// ChapterName Chapter name identifier
	ChapterName *string `json:"chapter_name,omitempty"`

	// ChapterTitle Human-readable chapter title
	ChapterTitle *string `json:"chapter_title,omitempty"`

	// ChapterUrl URL to the chapter content
	ChapterUrl *string `json:"chapter_url,omitempty"`

	// ContentUrl URL to the raw chapter content
	ContentUrl *string `json:"content_url,omitempty"`

	// Metadata Additional chapter metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`
}

// Creator Creator information
type Creator struct {
	// Name Creator name
	Name *string `json:"name,omitempty"`
}

// ErrorResponse Error response
type ErrorResponse struct {
	// Code Error code
	Code *int `json:"code,omitempty"`

	// Details Error details
	Details *string `json:"details,omitempty"`

	// Error Error message
	Error *string `json:"error,omitempty"`
}

// FlatTOCItem Individual item in flat table of contents
type FlatTOCItem struct {
	// Href Link or reference to the content
	Href *string `json:"href,omitempty"`

	// Id Unique identifier for the TOC item
	Id *string `json:"id,omitempty"`

	// Level Hierarchical level (0=root, 1=chapter, 2=section, etc.)
	Level *int `json:"level,omitempty"`

	// Metadata Additional information about the item
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Parent Reference to parent item ID (if applicable)
	Parent *string `json:"parent,omitempty"`

	// Title Display title of the section/chapter
	Title *string `json:"title,omitempty"`
}

// FlatTOCResponse Flat table of contents response with all items in a single array
type FlatTOCResponse struct {
	// BookId Book ID
	BookId *string `json:"book_id,omitempty"`

	// BookTitle Book title
	BookTitle *string `json:"book_title,omitempty"`

	// Metadata Additional metadata about the flat TOC structure
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// TocItems Flat list of all table of contents items
	TocItems *[]FlatTOCItem `json:"toc_items,omitempty"`

	// TotalItems Total number of TOC items
	TotalItems *int `json:"total_items,omitempty"`
}

// Publisher Publisher information
type Publisher struct {
	// Id Publisher ID
	Id *int `json:"id,omitempty"`

	// Name Publisher name
	Name *string `json:"name,omitempty"`

	// Slug Publisher slug
	Slug *string `json:"slug,omitempty"`
}

// RawSearchResult Raw search result from O'Reilly API
type RawSearchResult struct {
	// Author Author information
	Author *Author `json:"author,omitempty"`

	// AuthorNames Alternative author names field
	AuthorNames *[]string `json:"author_names,omitempty"`

	// Authors List of author names
	Authors *[]string `json:"authors,omitempty"`

	// ContentType Type of content
	ContentType *string    `json:"content_type,omitempty"`
	Creators    *[]Creator `json:"creators,omitempty"`

	// DatePublished Date published alternative
	DatePublished *string `json:"date_published,omitempty"`

	// Description Item description
	Description *string `json:"description,omitempty"`

	// DescriptionWithMarkups Description with markup
	DescriptionWithMarkups *string `json:"description_with_markups,omitempty"`

	// DisplayTitle Display title
	DisplayTitle *string `json:"display_title,omitempty"`

	// Excerpt Item excerpt
	Excerpt *string `json:"excerpt,omitempty"`

	// Format Content format
	Format *string `json:"format,omitempty"`

	// Id Item ID
	Id *string `json:"id,omitempty"`

	// Imprint Imprint
	Imprint *string `json:"imprint,omitempty"`

	// Isbn ISBN
	Isbn *string `json:"isbn,omitempty"`

	// LearningUrl Learning platform URL
	LearningUrl *string `json:"learning_url,omitempty"`

	// Link Link
	Link *string `json:"link,omitempty"`

	// Name Item name
	Name *string `json:"name,omitempty"`

	// Ourn O'Reilly URN
	Ourn *string `json:"ourn,omitempty"`

	// ProductId Product ID
	ProductId *string `json:"product_id,omitempty"`

	// ProductName Product name
	ProductName *string `json:"product_name,omitempty"`

	// ProductType Product type
	ProductType *string `json:"product_type,omitempty"`

	// PubDate Publication date alternative
	PubDate *string `json:"pub_date,omitempty"`

	// PublicationDate Publication date alternative
	PublicationDate *string `json:"publication_date,omitempty"`

	// PublishedDate Published date
	PublishedDate *string `json:"published_date,omitempty"`

	// Publisher Publisher name
	Publisher *string `json:"publisher,omitempty"`

	// PublisherName Publisher name alternative
	PublisherName *string `json:"publisher_name,omitempty"`

	// Publishers List of publishers
	Publishers *[]string `json:"publishers,omitempty"`

	// ShortDescription Short description
	ShortDescription *string `json:"short_description,omitempty"`

	// Summary Item summary
	Summary *string `json:"summary,omitempty"`

	// Title Item title
	Title *string `json:"title,omitempty"`

	// Type Alternative type field
	Type *string `json:"type,omitempty"`

	// Url URL
	Url *string `json:"url,omitempty"`

	// WebUrl Web URL
	WebUrl *string `json:"web_url,omitempty"`
}

// SearchAPIResponse Response from O'Reilly search API
type SearchAPIResponse struct {
	// Data Container for search data
	Data    *SearchDataContainer `json:"data,omitempty"`
	Hits    *[]RawSearchResult   `json:"hits,omitempty"`
	Items   *[]RawSearchResult   `json:"items,omitempty"`
	Results *[]RawSearchResult   `json:"results,omitempty"`
}

// SearchDataContainer Container for search data
type SearchDataContainer struct {
	Products *[]RawSearchResult `json:"products,omitempty"`
}

// TableOfContentsItem Table of contents item
type TableOfContentsItem struct {
	Children *[]TableOfContentsItem `json:"children,omitempty"`

	// Href Item link
	Href *string `json:"href,omitempty"`

	// Id Item ID
	Id *string `json:"id,omitempty"`

	// Level Nesting level
	Level *int `json:"level,omitempty"`

	// Metadata Additional metadata
	Metadata *map[string]interface{} `json:"metadata,omitempty"`

	// Parent Parent item ID
	Parent *string `json:"parent,omitempty"`

	// Title Item title
	Title *string `json:"title,omitempty"`
}

// Topics Topic information
type Topics struct {
	// EpubIdentifier EPUB identifier
	EpubIdentifier *string `json:"epub_identifier,omitempty"`

	// Name Topic name
	Name *string `json:"name,omitempty"`

	// Score Topic relevance score
	Score *float32 `json:"score,omitempty"`

	// Slug Topic slug
	Slug *string `json:"slug,omitempty"`

	// Uuid Topic UUID
	Uuid *string `json:"uuid,omitempty"`
}

// SearchContentV2Params defines parameters for SearchContentV2.
type SearchContentV2Params struct {
	// Query Search query string
	Query string `form:"query" json:"query"`

	// Rows Number of results to return
	Rows *int `form:"rows,omitempty" json:"rows,omitempty"`

	// TzOffset Timezone offset in hours
	TzOffset *int `form:"tzOffset,omitempty" json:"tzOffset,omitempty"`

	// AiaOnly Return only AI-assisted content
	AiaOnly *bool `form:"aia_only,omitempty" json:"aia_only,omitempty"`

	// FeatureFlags Feature flags for search
	FeatureFlags *string `form:"feature_flags,omitempty" json:"feature_flags,omitempty"`

	// Report Include report data in response
	Report *bool `form:"report,omitempty" json:"report,omitempty"`

	// IsTopics Search only in topics
	IsTopics *bool `form:"isTopics,omitempty" json:"isTopics,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetBookDetails request
	GetBookDetails(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookChapterInfo request
	GetBookChapterInfo(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookFlatTOC request
	GetBookFlatTOC(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBookChapterContent request
	GetBookChapterContent(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// SearchContentV2 request
	SearchContentV2(ctx context.Context, params *SearchContentV2Params, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetBookDetails(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookDetailsRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookChapterInfo(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookChapterInfoRequest(c.Server, bookId, chapterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookFlatTOC(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookFlatTOCRequest(c.Server, bookId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBookChapterContent(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBookChapterContentRequest(c.Server, bookId, chapterName)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) SearchContentV2(ctx context.Context, params *SearchContentV2Params, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewSearchContentV2Request(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetBookDetailsRequest generates requests for GetBookDetails
func NewGetBookDetailsRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/book/%s/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookChapterInfoRequest generates requests for GetBookChapterInfo
func NewGetBookChapterInfoRequest(server string, bookId string, chapterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapterName", runtime.ParamLocationPath, chapterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/book/%s/chapter/%s.html", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookFlatTOCRequest generates requests for GetBookFlatTOC
func NewGetBookFlatTOCRequest(server string, bookId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v1/book/%s/flat-toc/", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBookChapterContentRequest generates requests for GetBookChapterContent
func NewGetBookChapterContentRequest(server string, bookId string, chapterName string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "bookId", runtime.ParamLocationPath, bookId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "chapterName", runtime.ParamLocationPath, chapterName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/epubs/urn:orm:book:%s/files/%s.html", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewSearchContentV2Request generates requests for SearchContentV2
func NewSearchContentV2Request(server string, params *SearchContentV2Params) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/v2/search/")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "query", runtime.ParamLocationQuery, params.Query); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Rows != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "rows", runtime.ParamLocationQuery, *params.Rows); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TzOffset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tzOffset", runtime.ParamLocationQuery, *params.TzOffset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AiaOnly != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "aia_only", runtime.ParamLocationQuery, *params.AiaOnly); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FeatureFlags != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature_flags", runtime.ParamLocationQuery, *params.FeatureFlags); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Report != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "report", runtime.ParamLocationQuery, *params.Report); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IsTopics != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "isTopics", runtime.ParamLocationQuery, *params.IsTopics); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetBookDetailsWithResponse request
	GetBookDetailsWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookDetailsResponse, error)

	// GetBookChapterInfoWithResponse request
	GetBookChapterInfoWithResponse(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*GetBookChapterInfoResponse, error)

	// GetBookFlatTOCWithResponse request
	GetBookFlatTOCWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookFlatTOCResponse, error)

	// GetBookChapterContentWithResponse request
	GetBookChapterContentWithResponse(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*GetBookChapterContentResponse, error)

	// SearchContentV2WithResponse request
	SearchContentV2WithResponse(ctx context.Context, params *SearchContentV2Params, reqEditors ...RequestEditorFn) (*SearchContentV2Response, error)
}

type GetBookDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *BookDetailResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBookDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookChapterInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChapterInfoResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBookChapterInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookChapterInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookFlatTOCResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FlatTOCResponse
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBookFlatTOCResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookFlatTOCResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBookChapterContentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON404      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetBookChapterContentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBookChapterContentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type SearchContentV2Response struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *SearchAPIResponse
	JSON400      *ErrorResponse
	JSON401      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r SearchContentV2Response) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r SearchContentV2Response) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetBookDetailsWithResponse request returning *GetBookDetailsResponse
func (c *ClientWithResponses) GetBookDetailsWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookDetailsResponse, error) {
	rsp, err := c.GetBookDetails(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookDetailsResponse(rsp)
}

// GetBookChapterInfoWithResponse request returning *GetBookChapterInfoResponse
func (c *ClientWithResponses) GetBookChapterInfoWithResponse(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*GetBookChapterInfoResponse, error) {
	rsp, err := c.GetBookChapterInfo(ctx, bookId, chapterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookChapterInfoResponse(rsp)
}

// GetBookFlatTOCWithResponse request returning *GetBookFlatTOCResponse
func (c *ClientWithResponses) GetBookFlatTOCWithResponse(ctx context.Context, bookId string, reqEditors ...RequestEditorFn) (*GetBookFlatTOCResponse, error) {
	rsp, err := c.GetBookFlatTOC(ctx, bookId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookFlatTOCResponse(rsp)
}

// GetBookChapterContentWithResponse request returning *GetBookChapterContentResponse
func (c *ClientWithResponses) GetBookChapterContentWithResponse(ctx context.Context, bookId string, chapterName string, reqEditors ...RequestEditorFn) (*GetBookChapterContentResponse, error) {
	rsp, err := c.GetBookChapterContent(ctx, bookId, chapterName, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBookChapterContentResponse(rsp)
}

// SearchContentV2WithResponse request returning *SearchContentV2Response
func (c *ClientWithResponses) SearchContentV2WithResponse(ctx context.Context, params *SearchContentV2Params, reqEditors ...RequestEditorFn) (*SearchContentV2Response, error) {
	rsp, err := c.SearchContentV2(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseSearchContentV2Response(rsp)
}

// ParseGetBookDetailsResponse parses an HTTP response from a GetBookDetailsWithResponse call
func ParseGetBookDetailsResponse(rsp *http.Response) (*GetBookDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest BookDetailResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBookChapterInfoResponse parses an HTTP response from a GetBookChapterInfoWithResponse call
func ParseGetBookChapterInfoResponse(rsp *http.Response) (*GetBookChapterInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookChapterInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChapterInfoResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBookFlatTOCResponse parses an HTTP response from a GetBookFlatTOCWithResponse call
func ParseGetBookFlatTOCResponse(rsp *http.Response) (*GetBookFlatTOCResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookFlatTOCResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FlatTOCResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetBookChapterContentResponse parses an HTTP response from a GetBookChapterContentWithResponse call
func ParseGetBookChapterContentResponse(rsp *http.Response) (*GetBookChapterContentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBookChapterContentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseSearchContentV2Response parses an HTTP response from a SearchContentV2WithResponse call
func ParseSearchContentV2Response(rsp *http.Response) (*SearchContentV2Response, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &SearchContentV2Response{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest SearchAPIResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}
